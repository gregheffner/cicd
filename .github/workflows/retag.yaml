name: Monthly build and retag

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'
jobs:
  retag-latest:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get current year and month
        id: date
        run: echo "TAG=v$(date +'%Y.%m')" >> $GITHUB_OUTPUT

      - name: Pull latest image
        run: docker pull technotuba/nginx:latest

      - name: Tag image with year.month
        run: docker tag technotuba/nginx:latest technotuba/nginx:${{ steps.date.outputs.TAG }}

      - name: Push new tag
        run: docker push technotuba/nginx:${{ steps.date.outputs.TAG }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: pip install requests
      
      - name: Generate Dockerfile with latest versions
        run: python .github/scripts/generate_dockerfile.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: technotuba/nginx:latest   
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull --rebase

      - name: Get latest and previous tags from Docker Hub
        id: tags
        run: |
          python3 <<EOF
          import requests, os
          repo = "technotuba/nginx"
          url = f"https://hub.docker.com/v2/repositories/{repo}/tags?page_size=2&page=1&ordering=last_updated"
          resp = requests.get(url)
          tags = [result['name'] for result in resp.json()['results']]
          latest = tags[0] if len(tags) > 0 else "latest"
          previous = tags[1] if len(tags) > 1 else "latest"
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"LATEST={latest}\n")
              fh.write(f"PREVIOUS={previous}\n")
          EOF

      - name: Update green deployment to use latest image
        run: sed -i 's#technotuba/nginx:[^"]*#technotuba/nginx:${{ steps.tags.outputs.LATEST }}#g' DR/nginx-green.yaml

      - name: Update blue deployment to use previous image
        run: sed -i "s#technotuba/nginx:[^\"']*#technotuba/nginx:${{ steps.tags.outputs.PREVIOUS }}#g" prod/nginx-blue.yaml

      - name: Update README with current tags
        run: |
          python3 <<'EOF'
          import re
          
          # Read the README file
          with open('README.md', 'r') as f:
              content = f.read()
          
          print("Original README content (first 500 chars):")
          print(content[:500])
          
          # Define the tags
          latest_tag = "${{ steps.tags.outputs.LATEST }}"
          previous_tag = "${{ steps.tags.outputs.PREVIOUS }}"
          
          print(f"Latest tag: {latest_tag}")
          print(f"Previous tag: {previous_tag}")
          
          # Find all nginx image references
          nginx_pattern = r'technotuba/nginx:[^\s\]`]*'
          nginx_refs = re.findall(nginx_pattern, content)
          print(f"Found nginx references: {nginx_refs}")
          
          if len(nginx_refs) >= 2:
              # Replace first occurrence (Green Environment) with latest
              old_green = nginx_refs[0]
              new_green = f'technotuba/nginx:{latest_tag}'
              content = content.replace(old_green, new_green, 1)
              print(f"Replaced Green: {old_green} -> {new_green}")
              
              # Replace second occurrence (Blue Environment) with previous
              old_blue = nginx_refs[1] 
              new_blue = f'technotuba/nginx:{previous_tag}'
              content = content.replace(old_blue, new_blue, 1)
              print(f"Replaced Blue: {old_blue} -> {new_blue}")
          
          elif len(nginx_refs) == 1:
              # Only one reference found, update it to latest
              old_ref = nginx_refs[0]
              new_ref = f'technotuba/nginx:{latest_tag}'
              content = content.replace(old_ref, new_ref, 1)
              print(f"Replaced single reference: {old_ref} -> {new_ref}")
          
          else:
              print("No nginx references found in README")
          
          # Write back to README
          with open('README.md', 'w') as f:
              f.write(content)
              
          print("README update completed")
          EOF

      - name: Commit and push updated YAMLs
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add DR/nginx-green.yaml prod/nginx-blue.yaml README.md
          git commit -m "chore: update deployment images to latest and previous" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}`
